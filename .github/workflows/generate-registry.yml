name: Generate Mod Registry

on:
  push:
    branches:
    - master

jobs:
  generate-registry:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Generate registry.json
      run: |
        node - << 'EOF'
        const fs = require('fs');
        const path = require('path');
        const crypto = require('crypto');

        // Folders to check
        const folders = ["Actions", "Automations", "Events", "Themes", "Translations"];
        const registry = {};

        // Process each folder
        for (const folder of folders) {
          if (!fs.existsSync(folder)) {
            console.log(`Warning: ${folder} directory not found. Skipping.`);
            continue;
          }
          
          registry[folder] = {};
          
          // Function to walk directory recursively
          const walkDir = (dir, baseDir) => {
            const files = fs.readdirSync(dir);
            
            for (const file of files) {
              const filePath = path.join(dir, file);
              const stats = fs.statSync(filePath);
              
              if (stats.isDirectory()) {
                walkDir(filePath, baseDir);
              } else {
                const relativePath = path.relative(baseDir, filePath);
                
                // Calculate MD5 hash
                const fileContent = fs.readFileSync(filePath);
                const md5Hash = crypto.createHash('md5').update(fileContent).digest('hex');
                
                let metadata = {
                  md5: md5Hash
                };
                
                // Extract metadata for JavaScript files
                if (path.extname(filePath) === '.js' && (folder === 'Actions' || folder === 'Automations' || folder === 'Events')) {
                  try {
                    // Read file content as string
                    const content = fileContent.toString('utf8');
                    
                    // Extract name
                    const nameMatch = content.match(/data:\s*{\s*name:\s*"([^"]+)"/);
                    if (nameMatch && nameMatch[1]) {
                      metadata.name = nameMatch[1];
                    }
                    
                    // Extract modules
                    const modulesMatch = content.match(/modules:\s*\[(.*?)\]/s);
                    if (modulesMatch && modulesMatch[1]) {
                      const modulesStr = modulesMatch[1].trim();
                      if (modulesStr) {
                        // Parse module strings from the array notation
                        metadata.modules = modulesStr.split(',')
                          .map(m => m.trim().replace(/["']/g, ''))
                          .filter(m => m);
                      } else {
                        metadata.modules = [];
                      }
                    } else {
                      metadata.modules = [];
                    }
                    
                    // Extract category
                    const categoryMatch = content.match(/category:\s*"([^"]+)"/);
                    if (categoryMatch && categoryMatch[1]) {
                      metadata.category = categoryMatch[1];
                    }
                    
                    // Extract creator from info block
                    const creatorMatch = content.match(/creator:\s*"([^"]+)"/);
                    if (creatorMatch && creatorMatch[1]) {
                      metadata.creator = creatorMatch[1];
                    }
                  } catch (err) {
                    console.error(`Error parsing metadata from ${filePath}:`, err);
                  }
                }
                
                registry[folder][relativePath] = metadata;
              }
            }
          };
          
          walkDir(folder, folder);
        }

        // Write registry to file
        fs.writeFileSync('registry.json', JSON.stringify(registry, null, 2));
        console.log("Registry file generated successfully!");
        EOF

    - name: Commit and push registry.json
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add registry.json
        git diff --quiet && git diff --staged --quiet || git commit -m "Update registry.json with latest mod metadata"
        git push
